services:
  # Kong Database
  kong-database:
    image: postgres:11
    container_name: kong-database
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: ${KONG_DB_PASSWORD}
    volumes:
      - kong-data:/var/lib/postgresql/data
    networks:
      - gateway-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Kong Migration
  kong-migration:
    image: kong:latest
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD}
    networks:
      - gateway-network
    restart: on-failure

  # Kong API Gateway
  kong:
    image: my-kong-oidc:latest
    container_name: kong
    depends_on:
      kong-migration:
        condition: service_completed_successfully
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD}
      KONG_PLUGINS: bundled,oidc
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    networks:
      - gateway-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Consul
  consul:
    build:
      context: ./services/gateway/consul
    container_name: consul
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    volumes:
      - consul-data:/consul/data
    networks:
      - gateway-network
    command: "agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0"

  # Nginx Load Balancer
  nginx:
    build:
      context: ./services/gateway/nginx
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - kong
    networks:
      - gateway-network

  # IAM Service
  iam-service:
    build:
      context: ../services/iam-service
    container_name: iam-service
    ports:
      - "8082:8082"
    environment:
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
      - PORT=8082
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
    networks:
      - gateway-network
      - backend-network
    depends_on:
      - kong
      - consul

  konga-prepare:
    image: pantsel/konga:latest
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_PORT: 5432
      DB_USER: kong
      DB_PASSWORD: ${KONG_DB_PASSWORD}
      DB_DATABASE: kong
      NODE_ENV: production
    command: ["-c", "prepare", "-a", "postgres", "-u", "postgres://kong:admin@kong-database:5432/kong"]

    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - gateway-network
    restart: "no"

    
  konga:
    image: pantsel/konga:latest
    container_name: konga
    restart: always
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_PORT: 5432
      DB_USER: kong
      DB_PASSWORD: ${KONG_DB_PASSWORD}
      DB_DATABASE: kong
      NODE_ENV: production
    ports:
      - "1337:1337"
    depends_on:
      kong:
        condition: service_healthy
    networks:
      - gateway-network

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # RabbitMQ port
      - "15672:15672" # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5


  # User Service
  user-service:
    build:
      context: ../services/user-service
    container_name: user-service
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    environment:
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
      - PORT=${USER_SERVICE_PORT}
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
    networks:
      - gateway-network
      - backend-network
    depends_on:
      - consul
      - kong
      - iam-service

  # Product Service
  product-service:
    build:
      context: ../services/product-service
    container_name: product-service
    ports:
      - "${PRODUCT_SERVICE_PORT}:${PRODUCT_SERVICE_PORT}"
    environment:
      - KAFKA_SERVERS=kafka:9092
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
      - PORT=${PRODUCT_SERVICE_PORT}
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
    networks:
      - gateway-network
      - backend-network
    depends_on:
      - consul
      - kong
      - iam-service

  # Cart Service
  cart-service:
    build:
      context: ../services/cart-service
    container_name: cart-service
    ports:
      - "${CART_SERVICE_PORT}:${CART_SERVICE_PORT}"
    environment:
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
      - PORT=${CART_SERVICE_PORT}
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
    networks:
      - gateway-network
      - backend-network
    depends_on:
      - consul
      - kong
      - product-service
      - rabbitmq

  # Order Service
  order-service:
    build:
      context: ../services/order-service
    container_name: order-service
    ports:
      - "${ORDER_SERVICE_PORT}:${ORDER_SERVICE_PORT}"
    environment:
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
      - PORT=${ORDER_SERVICE_PORT}
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092 
      - ORDER_CREATED_TOPIC=order_created_topic
    networks:
      - gateway-network
      - backend-network
    depends_on:
      - consul
      - kong
      - cart-service
      - rabbitmq
      - kafka

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch-node
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f http://localhost:9200 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - backend-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Search Service
  search-service:
    build:
      context: ../services/search-service
    container_name: search-service
    ports:
      - "${SEARCH_SERVICE_PORT}:${SEARCH_SERVICE_PORT}"
    environment:
      - SPRING_APPLICATION_NAME=search-service
      - SERVER_PORT=${SEARCH_SERVICE_PORT}
      - ES_HOST=elasticsearch
      - ES_PORT=9200
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_SERVERS=kafka:9092
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
    networks:
      - gateway-network
      - backend-network
    depends_on:
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      consul:
        condition: service_started

  # Recommendation Service
  recommendation-service:
    build:
      context: ../services/recommendation-service 
    container_name: recommendation-service
    ports:
      - "8090:8090" 
    environment:
      - SERVICE_PORT=8090
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092 
      - ORDER_CREATED_TOPIC=order_created_topic
      - AZURE_CONNECTION_STRING=DefaultEndpointsProtocol=https;AccountName=orderhistoryfourj;AccountKey=AKWOHHSM2KRbQkaLtJYUIQHEwb3Sz+YG1ey+laONUUwdHuDScG/oDIkZuBlp73HHmNucEl83wn/l+AStbb2w8w==;EndpointSuffix=core.windows.net
      - USE_AZURE_STORAGE=true
      
      # --- Cấu hình Cosmos DB cho FastAPI (tải model) ---
      - COSMOS_ENDPOINT=https://fourjpredictmodel.documents.azure.com:443/
      - COSMOS_KEY=ebAXWVrkreQcKanNWYNDp2X60B1i0r383JuAZ4q93MXXwXyPjWpVhD9icP7KfbPw6Er9o9DJHKRdACDb2Vhegg==
      - COSMOS_DATABASE_NAME=RecommendationDB
      - COSMOS_MODELS_CONTAINER_NAME=Models
    networks:
      - gateway-network
      - backend-network
    depends_on:
      consul:
        condition: service_started 
      kafka:
        condition: service_healthy 
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  gateway-network:
    driver: bridge
  backend-network:
    driver: bridge

volumes:
  kong-data:
  consul-data:
  postgres-data:
  rabbitmq-data:
  elasticsearch-data:
  redis-data:
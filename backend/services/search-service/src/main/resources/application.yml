server:
  port: 8087
  shutdown: graceful

spring:
  application:
    name: search-service

  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      timeout: 2000
      database: 0

  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_SERVERS:localhost:9092}
    consumer:
      group-id: ${spring.application.name}
      auto-offset-reset: earliest
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.json.trusted.packages: "com.fourj.*,event"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

# Kafka topics
kafka:
  topics:
    product-events: product-events

# Elasticsearch Configuration
elasticsearch:
  host: ${ES_HOST:localhost}
  port: ${ES_PORT:9200}
  username: ${ES_USERNAME:}
  password: ${ES_PASSWORD:}
  ssl-enabled: ${ES_SSL:false}
  connect-timeout: 5000
  socket-timeout: 10000
  index-settings:
    products:
      name: products
      aliases:
        - product_search
      shards: 3
      replicas: 1
      refresh-interval: "5s"

# Cache Configuration
cache:
  hot-keys-ttl: 5 # seconds
  search-results-ttl: 300 # seconds

# Circuit Breaker Configuration
resilience4j:
  circuitbreaker:
    instances:
      elasticsearch:
        registerHealthIndicator: true
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 20s
        permittedNumberOfCallsInHalfOpenState: 5
  retry:
    instances:
      elasticsearch:
        maxAttempts: 3
        waitDuration: 1s
        retryExceptions:
          - java.io.IOException
          - java.net.SocketTimeoutException

# Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  metrics:
    distribution:
      percentiles-histogram:
        http.server.requests: true
        search.request.latency: true
  prometheus:
    metrics:
      export:
        enabled: true